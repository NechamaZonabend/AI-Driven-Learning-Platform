// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(255)
  phone     String   @unique @db.VarChar(20)
  password  String   @db.VarChar(255)
  role      Role     @default(USER)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  prompts Prompt[]

  @@map("users")
}

model Category {
  id   Int    @id @default(autoincrement())
  name String @unique @db.VarChar(255)

  // Relations
  subCategories SubCategory[]
  prompts       Prompt[]

  @@map("categories")
}

model SubCategory {
  id         Int    @id @default(autoincrement())
  name       String @db.VarChar(255)
  categoryId Int    @map("category_id")

  // Relations
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  prompts  Prompt[]

  @@unique([name, categoryId])
  @@map("sub_categories")
}

model Prompt {
  id            Int      @id @default(autoincrement())
  userId        Int      @map("user_id")
  categoryId    Int      @map("category_id")
  subCategoryId Int      @map("sub_category_id")
  prompt        String   @db.Text
  response      String   @db.Text
  createdAt     DateTime @default(now()) @map("created_at")

  // Relations
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  category    Category    @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  subCategory SubCategory @relation(fields: [subCategoryId], references: [id], onDelete: Cascade)

  @@map("prompts")
}

enum Role {
  USER
  ADMIN
}